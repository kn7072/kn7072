# coding: utf-8
"""Как работает yield from."""
from collections import namedtuple

from typing import Dict, List


"""
Прежде всего, нужно ясно понимать, что yield from – совершенно новая языковая
конструкция. Она умеет настолько больше yield, что использование одного и того
же ключевого слова только вводит в заблуждение. Аналогичные конструкции в
других языках называются await, и это куда более подходящее имя, потому что
передает важнейшую мысль: когда генератор gen вызывает yield from subgen(),
subgen перехватывает управление и начинает отдавать значения непосредственно
функции, из которой был вызван gen, т. е. вызывающая сторона напрямую управ-
ляет subgen. А тем временем gen остается блокированным в ожидании завершения
subgen

Основное применение yield from – открытие двустороннего канала между
внешней вызывающей программой и внутренним субгенератором, так чтобы
значения можно было отправлять и отдавать напрямую, а исключения возбуж-
дать и обрабатывать без написания громоздкого стереотипного кода в проме-
жуточных сопрограммах. Это открывает новую возможность – делегирование
сопрограмме.

"""


Result = namedtuple('Result', 'count average')


# стр 511 Пример 16.17
# субгенератор
def averager() -> namedtuple:  # 1
    """субгенератор."""
    total = 0.0
    count = 0
    average = None
    while True:
        term = yield  # 2
        if term is None:  # 3
            break
        total += term
        count += 1
        average = total/count
    return Result(count, average)  # 4


# делегирующий генератор
def grouper(results, key):  # 5
    while True:  # 6
        results[key] = yield from averager()  # 7


# клиентский код, или вызывающая сторона
def main(data: Dict[str, List[float]]) -> None:  # 8
    """клиентский код, или вызывающая сторона."""
    results = {}
    for key, values in data.items():
        group = grouper(results, key)  # 9
        next(group)  # 10
        for value in values:
            group.send(value)  # 11
        group.send(None)  # важно!  # 12
    # print(results) # раскомментировать для отладки
    report(results)


# вывод отчета
def report(results: Dict) -> None:
    """Выводит отчет."""
    for key, result in sorted(results.items()):
        group, unit = key.split(';')
        print('{:2} {:5} averaging {:.2f}{}'.format(result.count, group, result.average, unit))


data = {
        'girls;kg': [40.9, 38.5, 44.3, 42.2, 45.2, 41.7, 44.5, 38.0, 40.6, 44.5],
        'girls;m': [1.6, 1.51, 1.4, 1.3, 1.41, 1.39, 1.33, 1.46, 1.45, 1.43],
        'boys;kg': [39.0, 40.8, 43.2, 40.8, 43.1, 38.6, 41.4, 40.6, 36.3],
        'boys;m': [1.38, 1.5, 1.32, 1.25, 1.37, 1.48, 1.25, 1.49, 1.46],
}


if __name__ == "__main__":
    main(data)
"""
1 Та же сопрограмма averager, что в примере 16.13. Здесь это субгенератор.

2 Каждое значение, отправленное клиентским кодом в main, здесь связывает-
ся с переменной term.

3 Условие окончания. Без него выражение yield from, вызвавшее эту сопро-
грамму, оказалось бы навечно блокированным.

4 Возвращенное значение Result является значением выражения yield from
в grouper.

5 grouper – делегирующий генератор.

6 На каждой итерации этого цикла создается новый экземпляр averager ;
каждый из них является объектом-генератором, работающим как сопро-
грамма.

7 Значение, отправляемое генератору grouper, помещается выражением
yield from в канал, открытый с объектом averager. grouper остается при-
остановленным, пока averager потребляет значения, отправляемые клиен-
том. Когда выполнение averager завершится, возвращенное им значение
будет связано с results[key]. После этого в цикле while создается очеред-
ной экземпляр averager для потребления последующих значений.

8 main – клиентский код, или «вызывающая сторона» в терминологии
PEP 380. Эта функция управляет всем остальным.

9 group – объект-генератор, получающийся в результаты вызова grouper с
аргументами results – словарем, в котором будут собираться результа-
ты, – и key – конкретным ключом этого словаря. Этот объект будет рабо-
тать как сопрограмма.

10 Инициализируем сопрограмму.

11 Отправляем каждое значение value объекту grouper. Оно будет получено
в строке term = yield кода averager; grouper его никогда не увидит.

12 Отправка значения None объекту grouper приводит к завершению текущего
экземпляра averager и дает возможность grouper возобновить выполнение
и создать очередной объект averager для обработки следующей группы
значений.

"""

https://neovim.io/doc/user/lua.html

Displays a notification to the user. 
vim.log.levels Log levels are one of the values defined in vim.log.levels:
vim.log.levels.DEBUG vim.log.levels.ERROR vim.log.levels.INFO vim.log.levels.TRACE vim.log.levels.WARN vim.log.levels.OFF 

lua vim.notify("msg", vim.log.levels.DEBUG)

Parameters:
{msg} (string) Content of the notification to show to the user.
{level} (integer?) One of the values from vim.log.levels.
{opts} (table?) Optional parameters. Unused by default.

nvim_buf_lines_event
:echo b:changedtick
lua print(vim.b["changedtick"])

        lua vim.api.nvim_buf_lines_event(vim.api.nvim_get_current_buf(), 3, 1, 3, {"1", "2", "3"}, true)   b:changedtick
        lua vim.api.nvim_buf_lines_event(vim.api.nvim_get_current_buf(), 1, 1, 1, {"1" }, false)
        lua vim.api.nvim_buf_lines_event[vim.api.nvim_get_current_buf(), {changedtick}, 0, 0, ["line1", "line2"], false]

изменить текст в сроках
lua vim.api.nvim_buf_set_text(vim.api.nvim_get_current_buf(), 20, 1, 23, 1, {"1", "2", "3"})
({buffer}, {start_row}, {start_col}, {end_row}, {end_col}, {replacement}) Sets (replaces) a range in the buffer 

изменить текст в сроках - предпочтительней чем nvim_buf_set_text
lua vim.api.nvim_buf_set_lines(vim.api.nvim_get_current_buf(), 20, 25, false, {"1", "2", "3"})
{buffer}, {start}, {end}, {strict_indexing}, {replacement}


число строк в буфере 0
lua print(vim.api.nvim_bug_line_count(0))

получить строки
lua print(vim.inspect(vim.api.nvim_buf_get_lines(0, 0, 3, true)))
(buf, firstline, new_lastline, true)

сделает активным текущий буфер, то есть в текущем окне отобразиться содержимое буфера
api.nvim_set_current_buf(plugin_buffer)

сделает активным указанное окно
api.nvim_set_current_win(window_id)

##################################################
nvim_get_hl({ns_id}, {opts})
nvim_get_hl() Gets all or specific highlight groups in a namespace. 

lua vim.api.nvim_create_namespace()

посмотрить какие hl у namespace
lua ns_id = vim.api.nvim_create_namespace("plugin_ns"); print(vim.inspect(vim.api.nvim_get_hl(ns_id, {name="Myhl"})))
lua print(vim.inspect(vim.api.nvim_get_hl(0, {name="BlackOnLightYellowBuffer"}))) ранее добавлен в плагине BlackOnLightYellowBuffer
lua print(vim.inspect(vim.api.nvim_get_hl(0, {}))) посмотрить все стили

    lua print(vim.api.nvim_set_hl_ns(0))
    nvim_set_hl_ns() Set active namespace for highlights defined with nvim_set_hl() This can be set for a single window, see            nvim_win_set_hl_ns(). 

идентификатор hl
lua print(vim.api.nvim_get_hl_id_by_name("BlackOnLightYellowBuffer"))
nvim_get_hl_id_by_name() Gets a highlight group by name

    lua print(vim.api.nvim_get_hl_ns({windid = vim.api.nvim_get_current_win()}))
    nvim_get_hl_ns() Gets the active highlight namespace.


nvim_win_set_hl_ns({window}, {ns_id})
nvim_win_set_hl_ns() Set highlight namespace for a window.

lua ns_id = vim.api.nvim_create_namespace("plugin_ns"); vim.api.nvim_set_hl(ns_id, 'ColorStudyPlugin', {ctermbg = 0, fg = '#000000', bg = '#e5c07b', bold = true}); vim.api.nvim_win_set_hl_ns(0, ns_id)

api.nvim_set_option_value('filetype', 'markdown', {buf = buf})
api.nvim_set_option_value('winhl', 'Normal:BlackOnLightYellow', {win = win})
##################################################
nvim_get_current_win()
nvim_get_current_win() Gets the current window. 

текущее окно
lua print(vim.api.nvim_get_current_win())

lua require'study'.pick()
lua require'study'.print_hl() 









https://neovim.io/doc/user/lua.html

Displays a notification to the user. 
vim.log.levels Log levels are one of the values defined in vim.log.levels:
vim.log.levels.DEBUG vim.log.levels.ERROR vim.log.levels.INFO vim.log.levels.TRACE vim.log.levels.WARN vim.log.levels.OFF 

lua vim.notify("msg", vim.log.levels.DEBUG)

Parameters:
{msg} (string) Content of the notification to show to the user.
{level} (integer?) One of the values from vim.log.levels.
{opts} (table?) Optional parameters. Unused by default.

nvim_buf_lines_event
:echo b:changedtick
lua print(vim.b["changedtick"])

        lua vim.api.nvim_buf_lines_event(vim.api.nvim_get_current_buf(), 3, 1, 3, {"1", "2", "3"}, true)   b:changedtick
        lua vim.api.nvim_buf_lines_event(vim.api.nvim_get_current_buf(), 1, 1, 1, {"1" }, false)
        lua vim.api.nvim_buf_lines_event[vim.api.nvim_get_current_buf(), {changedtick}, 0, 0, ["line1", "line2"], false]

изменить текст в сроках
lua vim.api.nvim_buf_set_text(vim.api.nvim_get_current_buf(), 20, 1, 23, 1, {"1", "2", "3"})
({buffer}, {start_row}, {start_col}, {end_row}, {end_col}, {replacement}) Sets (replaces) a range in the buffer 

изменить текст в сроках - предпочтительней чем nvim_buf_set_text
lua vim.api.nvim_buf_set_lines(vim.api.nvim_get_current_buf(), 20, 25, false, {"1", "2", "3"})
{buffer}, {start}, {end}, {strict_indexing}, {replacement}


число строк в буфере 0
lua print(vim.api.nvim_bug_line_count(0))

получить строки
lua print(vim.inspect(vim.api.nvim_buf_get_lines(0, 0, 3, true)))
(buf, firstline, new_lastline, true)

получить фрагмент строки
nvim_buf_get_text({buffer}, {start_row}, {start_col}, {end_row}, {end_col}, {opts}) Gets a range from the buffer
lua print(vim.inspect(vim.api.nvim_buf_get_text(vim.api.nvim_get_current_buf(), 1, 1, 1, 5, {})))

сделает активным текущий буфер, то есть в текущем окне отобразиться содержимое буфера
api.nvim_set_current_buf(plugin_buffer)

сделает активным указанное окно
api.nvim_set_current_win(window_id)

##################################################
nvim_get_hl({ns_id}, {opts})
nvim_get_hl() Gets all or specific highlight groups in a namespace. 

lua vim.api.nvim_create_namespace()

посмотрить какие hl у namespace
lua ns_id = vim.api.nvim_create_namespace("plugin_ns"); print(vim.inspect(vim.api.nvim_get_hl(ns_id, {name="Myhl"})))
lua print(vim.inspect(vim.api.nvim_get_hl(0, {name="BlackOnLightYellowBuffer"}))) ранее добавлен в плагине BlackOnLightYellowBuffer
lua print(vim.inspect(vim.api.nvim_get_hl(0, {}))) посмотрить все стили

    lua print(vim.api.nvim_set_hl_ns(0))
    nvim_set_hl_ns() Set active namespace for highlights defined with nvim_set_hl() This can be set for a single window, see            nvim_win_set_hl_ns(). 

идентификатор hl
lua print(vim.api.nvim_get_hl_id_by_name("BlackOnLightYellowBuffer"))
nvim_get_hl_id_by_name() Gets a highlight group by name

    lua print(vim.api.nvim_get_hl_ns({windid = vim.api.nvim_get_current_win()}))
    nvim_get_hl_ns() Gets the active highlight namespace.


nvim_win_set_hl_ns({window}, {ns_id})
nvim_win_set_hl_ns() Set highlight namespace for a window.

lua ns_id = vim.api.nvim_create_namespace("plugin_ns"); vim.api.nvim_set_hl(ns_id, 'ColorStudyPlugin', {ctermbg = 0, fg = '#000000', bg = '#e5c07b', bold = true}); vim.api.nvim_win_set_hl_ns(0, ns_id)

api.nvim_set_option_value('filetype', 'markdown', {buf = buf})
api.nvim_set_option_value('winhl', 'Normal:BlackOnLightYellow', {win = win})
##################################################
nvim_get_current_win()
nvim_get_current_win() Gets the current window. 

текущее окно
lua print(vim.api.nvim_get_current_win())

lua require'study'.pick()
lua require'study'.print_hl() 


lua print(vim.api.nvim_tabpage_get_number(0))  1
lua print(vim.inspect(vim.api.nvim_tabpage_list_wins(0))) возвращает список индентификаторов окон вкдадки
lua print(vim.inspect(vim.api.nvim_tabpage_get_var(0)))

lua print(vim.inspect(vim.fn.tabpagenr()))

set showtabline=2
The value of this option specifies when the line with tab page labels
	will be displayed:
		0: never
		1: only if there are at least two tab pages
		2: always	
:set tabline  узнать текущее значение
:set tabline=%f

##################################################
zR : opens all folders
zM : collapses all folders
zo : opens the folder you're in (1 level)
zO : opens all folders recursively at the cursor line
zc : collapses the folder you're in (1 level)
zC : collapses all folders recursively at the cursor line
zn : deactivates folding
zN : restores folding to previous state
zi : toggles between zn and zN
za : Toggle between closing and opening the fold under the cursor.

https://neovim.io/doc/user/syntax.html#_7.-:syntax-arguments
fold							*:syn-fold*

The "fold" argument makes the fold level increase by one for this item.
Example:  
   :syn region myFold start="{" end="}" transparent fold
   :syn sync fromstart
   :set foldmethod=syntax
This will make each {} block form one fold.

The fold will start on the line where the item starts, and end where the item
ends.  If the start and end are within the same line, there is no fold.
The 'foldnestmax' option limits the nesting of syntax folds.
See |:syn-foldlevel| to control how the foldlevel of a line is computed
from its syntax items.

https://neovim.io/doc/user/options.html#'fdo' опции доступные для команд foldopen, foldclose
set foldopen=all фолд будет открываться при попадании в него
set foldclose=all фолд будет закрываться при попадании в него

syn region  luaFunctionBlock     matchgroup=luaFunction start="function" end="end" contains=ALLBUT transparent fold

после ввода команды нужно нажать zc чтобы отобразились подсказки 
syn region  luaFunctionBlock     matchgroup=luaFunction start="function" end="end" contains=ALLBUT,luaTodo,luaSpecial,luaCond,luaCondElseif,luaCondEnd,luaRepeat transparent fold

сразу выделяет фрагменты
syn region  luaFunctionBlock  transparent   matchgroup=luaFunction start="\<function\>" end="\<end\>" contains=ALLBUT,luaTodo,luaSpecial,luaCond,luaCondElseif,luaCondEnd,luaRepeat  fold

автоматически сварачивает все что начинается с h
set foldmethod=expr
set foldexpr=getline(v:lnum)[0]==\"h\"
##################################################
https://neovim.io/doc/user/lua-guide.html#_vim.opt lua

:help lua-vim-variables

These wrappers also have more sophisticated vim.opt* variants that provide convenient mechanisms for setting options in Lua. They're similar to what you might be used to in your init.vim:

    vim.opt: behaves like :set
    vim.opt_global: behaves like :setglobal
    vim.opt_local: behaves like :setlocal

##################################################
tabpagenr([{arg}])                                                 
tabpagenr()

		The result is a Number, which is the number of the current
		tab page.  The first tab page has number 1.
		The optional argument {arg} supports the following values:
			$	the number of the last tab page (the tab page
				count).
			#	the number of the last accessed tab page
				(where g<Tab> goes to).  If there is no
				previous tab page, 0 is returned.
		The number can be used with the :tab command.
		Returns zero on error.

lua print(vim.fn.tabpagenr("$"))

lua print(vim.inspect(vim.fn.tabpagebuflist(1))) активные буферы в окне nvim, если окно разделено на области
будут выведеные все отображаемые буферы

https://neovim.io/doc/user/builtin.html#tabpagewinnr()
lua print(vim.inspect(vim.fn.tabpagewinnr(1)))
lua print(vim.inspect(vim.fn.tabpagewinnr(3, '$'))) если во кладке 3 два окна тогда функция вернет 2

https://neovim.io/doc/user/options.html#'showtabline'
You can use the 'showtabline' option to specify when you want the line with
tab page labels to appear: never, when there is more than one tab page or
always.

lua print(vim.inspect(vim.fn.gettabinfo())) выводит информацию по всем кладкам, открытым окном в
вкладка
gettabinfo([{tabnr}])                                             
gettabinfo()

		If {tabnr} is not specified, then information about all the
		tab pages is returned as a List. Each List item is a
		Dictionary.  Otherwise, {tabnr} specifies the tab page
		number and information about that one is returned.  If the tab
		page does not exist an empty List is returned.
		Each List item is a Dictionary with the following entries:
			tabnr		tab page number.
			variables	a reference to the dictionary with
					tabpage-local variables
			windows		List of window-IDs in the tab page.

lua print(vim.inspect(vim.fn.getbufinfo({ buflisted = 1 }))) выводит данные по всем буферам, которые реально открыты и не отображает все доспупные, только действующие в данный момент
getbufinfo([{dict}])
		Get information about buffers as a List of Dictionaries.
		Without an argument information about all the buffers is
		returned.
		When the argument is a Dictionary only the buffers matching
		the specified criteria are returned.  The following keys can
		be specified in {dict}:
			buflisted	include only listed buffers.
			bufloaded	include only loaded buffers.
			bufmodified	include only modified buffers.
		Otherwise, {buf} specifies a particular buffer to return
		information for.  For the use of {buf}, see bufname()
		above.  If the buffer is found the returned List has one item.
		Otherwise the result is an empty list.
		Each returned List item is a dictionary with the following
		entries:
			bufnr		Buffer number.
			changed		TRUE if the buffer is modified.
			changedtick	Number of changes made to the buffer.
			command		TRUE if the buffer belongs to the
					command-line window cmdwin.
			hidden		TRUE if the buffer is hidden.
			lastused	Timestamp in seconds, like
					localtime(), when the buffer was
					last used.
			listed		TRUE if the buffer is listed.
			lnum		Line number used for the buffer when
					opened in the current window.
					Only valid if the buffer has been
					displayed in the window in the past.
					If you want the line number of the
					last known cursor position in a given
					window, use line():

определяет видимые буферы 
lua for i, buf_hndl in ipairs(vim.api.nvim_list_bufs()) do if vim.api.nvim_buf_is_loaded(buf_hndl) then print(vim.api.nvim_buf_get_name(buf_hndl))        end    end

все валидные буфера и те что отображаются в табах и файлы документации если вызывалась справка
lua for i, buf_hndl in ipairs(vim.api.nvim_list_bufs()) do if vim.api.nvim_buf_is_valid(buf_hndl) then print(vim.api.nvim_buf_get_name(buf_hndl))        end    end

определяет только видимые буферы 
lua for i, buf_hndl in ipairs(vim.api.nvim_list_bufs()) do if vim.api.nvim_buf_is_loaded(buf_hndl) and vim.bo[buf_hndl].buflisted  then print(vim.api.nvim_buf_get_name(buf_hndl))        end    end

https://neovim.io/doc/user/lua.html#vim.bo
lua print(vim.inspect(vim.bo))
lua print(vim.inspect(vim.bo[5].buflisted)) 5 это номер буфера, buflisted дает понять что буфер открытый,
чтобы можно было отфильтровать только реально открытые и буфера без документации и подобного

https://neovim.io/doc/user/options.html#options
https://neovim.io/doc/user/options.html#'buftype'
lua print(vim.bo[5].buflisted)
lua print(vim.bo[5].bufhidden)
lua print(vim.bo[5].buftype) тип буфера, для спрвки будет help, пустое значение это обычный буфер
The value of this option specifies the type of a buffer:
	  <empty>	normal buffer
	  acwrite	buffer will always be written with BufWriteCmds
	  help		help buffer (do not set this manually)
	  nofile	buffer is not related to a file, will not be written
	  nowrite	buffer will not be written
	  quickfix	list of errors :cwindow or locations :lwindow
	  terminal	terminal-emulator buffer
	  prompt	buffer where only the last line can be edited, meant
			to be used by a plugin, see prompt-buffer

tabline=%!v:lua.nvim_bufferline() 



lua print(vim.inspect(vim.api.nvim_list_tabpages())) идентификаторы вкладок
navim_list_tabpages()
Gets the current list of tabpage handles.
Return:
List of tabpage handles 

nvim_tabpage_get_win({tabpage})
Gets the current window in a tabpage
Parameters:
{tabpage} Tabpage handle, or 0 for current tabpage
lua print(vim.inspect(vim.api.nvim_tabpage_get_win(1))) текущее окно для вкладки 

nvim_win_get_buf({window})
Gets the current buffer in a window
Parameters:
{window} Window handle, or 0 for current window
lua print(vim.inspect(vim.api.nvim_win_get_buf(1022))) активный буфер окна

nvim_buf_get_name({buffer})
Gets the full file name for the buffer
Parameters:
{buffer} Buffer handle, or 0 for current buffer
Return:
Buffer name 

lua print(vim.inspect(vim.api.nvim_buf_get_name(17))) имя файла
https://neovim.io/doc/user/cmdline.html#filename-modifiers  модификаторы путей
<LeftMouse>:_%: ::8 ::p ::. ::~ ::h ::t ::r ::e ::s ::gs ::S
     %:8 %:p %:. %:~ %:h %:t %:r %:e %:s %:gs %:S
lua print(vim.inspect(vim.fn.fnamemodify("xxx/yyy/x.lua", ":t"))) x.lua

если текст выделялся в построчном режиме V((visual line mode)) тогда col будет maxcol
(https://neovim.io/doc/user/builtin.html#getpos())
lua print(vim.inspect(vim.fn.getpos("'>")))




lua print(vim.inspect(vim.fn.mode()))
lua print(vim.inspect(vim.api.nvim_get_mode()))
lua vim.api.nvim_buf_set_text(0, 1, 2, 3, 2, {"xx", "yy"})

################################################################################################
https://github.com/neovim/neovim/issues/12312
vim.api.nvim_replace_termcodes переводит последовательность комонд в коды понятные терминалу комонды
:lua vim.api.nvim_feedkeys(vim.api.nvim_replace_termcodes('ifoo<cr>',true,false,true),'m',true) 



https://www.reddit.com/r/neovim/comments/y76wyq/how_do_i_run_something_after_vimapinvim_feedkeys/
https://neovim.io/doc/user/builtin.html#feedkeys()
https://neovim.io/doc/user/api.html#nvim_replace_termcodes()

Hi! I'm trying to enable ]s/[s (jump to next/previous spelling error) regardless of whether vim.wo.spell is true or false. 
By default, it needs to be set to true in order for ]s/[s to work, otherwise nothing happens. 
My idea is to create a mapping that enables spell, then does ]s, and then restores spell to whatever it was set to before I presssed ]s/[s. Here's what I have: 

vim.keymap.set('n', ']s', function()
  local spell = vim.wo.spell
  vim.wo.spell = true
  vim.api.nvim_feedkeys(vim.api.nvim_replace_termcodes(']s', true, true, true), 'in', true)
  vim.schedule(function()
    vim.wo.spell = spell
  end)
end)


lua local x = "<C-Home>"; print(vim.fn.keytrans(x))




################################################################################################
регистры
getreg([{regname} [, 1 [, {list}]]])
		The result is a String, which is the contents of register
		{regname}.  Example:
let cliptext = getreg('*')

		When register {regname} was not set the result is an empty
		string.
		The {regname} argument must be a string.
		getreg('=') returns the last evaluated value of the expression
		register.  (For use in maps.)
		getreg('=', 1) returns the expression itself, so that it can
		be restored with setreg().  For other registers the extra
		argument is ignored, thus you can always give it.
		If {list} is present and TRUE, the result type is changed
		to List. Each list item is one text line. Use it if you care
		about zero bytes possibly present inside register: without
		third argument both NLs and zero bytes are represented as NLs
		(see NL-used-for-Nul).
		When the register was not set an empty list is returned.
		If {regname} is not specified, v:register is used.

lua print(vim.fn.getreg('y'))

#################
в каком режиме был скопирован текст в буфер x
(https://neovim.io/doc/user/builtin.html#getregtype())
lua print(vim.inspect(vim.fn.getregtype("x")))
echo v:register     // +
reg x чтобы проверить сожержимое регистра
#################
getreginfo([{regname}])                                           
		Returns detailed information about register {regname} as a
		Dictionary with the following entries:
			regcontents	List of lines contained in register
					{regname}, like
					getreg({regname}, 1, 1).
			regtype		the type of register {regname}, as in
					getregtype().
			isunnamed	Boolean flag, v:true if this register
					is currently pointed to by the unnamed
					register.
			points_to	for the unnamed register, gives the
					single letter name of the register
					currently pointed to (see quotequote).
					For example, after deleting a line
					with dd, this field will be "1",
					which is the register that got the
					deleted text.

lua print(vim.inspect(vim.fn.getreginfo('y'))) посмотреть на тип регистра и его сожержимое
например, по типу (regtype=\02210) можно судить, что копирование контента осуществлялось в 
block-wise Visual mode, \022 это код обозначающий ^V режим

22 также можно можно получить 
lua print(vim.fn.char2nr(vim.fn.nr2char(0x16)))
<CTRL-V> is one character with value 0x16. (https://neovim.io/doc/user/builtin.html#getregtype())

#################
setreg({regname}, {value} [, {options}])                              
		Set the register {regname} to {value}.
		If {regname} is "" or "@", the unnamed register '"' is used.
		The {regname} argument is a string.
		{value} may be any value returned by getreg() or
		getreginfo(), including a List or Dict.
		If {options} contains "a" or {regname} is upper case,
		then the value is appended.
		{options} can also contain a register type specification:
		    "c" or "v"	      charwise mode
		    "l" or "V"	      linewise mode
		    "b" or "<CTRL-V>" blockwise-visual mode
		If a number immediately follows "b" or "<CTRL-V>" then this is
		used as the width of the selection - if it is not specified
		then the width of the block is set to the number of characters
		in the longest line (counting a <Tab> as 1 character).
		If {options} contains "u" or '"', then the unnamed register is
		set to point to register {regname}.
		If {options} contains no register settings, then the default
		is to use character mode unless {value} ends in a <NL> for
		string {value} and linewise mode for list {value}. Blockwise
		mode is never selected automatically.
		Returns zero for success, non-zero for failure.
							
E883
  
		Note: you may not use List containing more than one item to
		      set search and expression registers. Lists containing no
		      items act like empty strings.
		Examples:

call setreg(v:register, @*)
call setreg('*', @%, 'ac')
call setreg('a', "1\n2\n3", 'b5')
call setreg('"', { 'points_to': 'a'})

		This example shows using the functions to save and restore a
		register:

let var_a = getreginfo()
call setreg('a', var_a)

		or:

let var_a = getreg('a', 1, 1)
let var_amode = getregtype('a')
" ....
call setreg('a', var_a, var_amode)

		Note: you may not reliably restore register value
		without using the third argument to getreg() as without it
		newlines are represented as newlines AND Nul bytes are
		represented as newlines as well, see NL-used-for-Nul.
		You can also change the type of a register by appending
		nothing:

call setreg('a', '', 'al')

lua local r = vim.fn.setreg("r", "1\n2\n3", "b5")
lua local r = vim.fn.setreg("r", "1\n2\n3", "c")


################################################################################################

You can do that with the :map command. There are also other variants.

:nmap - Display normal mode maps
:imap - Display insert mode maps
:vmap - Display visual and select mode maps
:smap - Display select mode maps
:xmap - Display visual mode maps
:cmap - Display command-line mode maps
:omap - Display operator pending mode maps

:Telescope keymaps

lua print(vim.fn.mapckeck('gdt', "n")) показывает комманду связанную с этой последовательностью
lua print(vim.fn.mapckeck('<leader>x', "n"))  покажет ':BufferLinePickClose<CR>'
lua print(vim.fn.mapckeck('jj', "i"))  покажет <Esc>

lua print(vim.inspect(vim.fn.maplist()))
lua local all_maps = vim.fn.maplist(); local saved_map = {}; for _,m in ipairs(all_maps) do if m.mode_bits==16 then table.insert(saved_map, m) end end; print(vim.inspect(saved_map))

для поиска всех комбинаций начинающихся с лидера(лидер нахначена на <Space)
lua local all_maps = vim.fn.maplist(); local saved_map = {}; for _,m in ipairs(all_maps) do local m_rhs = vim.tbl_get(m, "lhs") if m_rhs and string.match(m_rhs, "<Space.*") then table.insert(saved_map, m) end end; print(vim.inspect(saved_map))


Returns a List of all mappings.  Each List item is a Dict,
		the same as what is returned by maparg(), see
		mapping-dict.  When {abbr} is there and it is TRUE use
		abbreviations instead of mappings.
		Example to show all mappings with "MultiMatch" in rhs:

echo maplist()->filter({_, m ->
        \ match(get(m, 'rhs', ''), 'MultiMatch') >= 0
        \ })

		It can be tricky to find mappings for particular :map-modes.
		mapping-dict's "mode_bits" can simplify this. For example,
		the mode_bits for Normal, Insert or Command-line modes are
		0x19. To find all the mappings available in those modes you
		can do:

let saved_maps = []
for m in maplist()
    if and(m.mode_bits, 0x19) != 0
        eval saved_maps->add(m)
    endif
endfor
echo saved_maps->mapnew({_, m -> m.lhs})

		The values of the mode_bits are defined in Nvim's
		src/nvim/state_defs.h file and they can be discovered at
		runtime using :map-commands and "maplist()". Example:

omap xyzzy <Nop>
let op_bit = maplist()->filter(
    \ {_, m -> m.lhs == 'xyzzy'})[0].mode_bits
ounmap xyzzy
echo printf("Operator-pending mode bit: 0x%x", op_bit)

https://neovim.io/doc/user/builtin.html#mapping-dict
"lhs"	     The {lhs} of the mapping as it would be typed
		  "lhsraw"   The {lhs} of the mapping as raw bytes
		  "lhsrawalt" The {lhs} of the mapping as raw bytes, alternate
			      form, only present when it differs from "lhsraw"
		  "rhs"	     The {rhs} of the mapping as typed.
		  "callback" Lua function, if RHS was defined as such.
		  "silent"   1 for a :map-silent mapping, else 0.
		  "noremap"  1 if the {rhs} of the mapping is not remappable.
		  "script"   1 if mapping was defined with <script>.
		  "expr"     1 for an expression mapping (:map-<expr>).
		  "buffer"   1 for a buffer local mapping (:map-local).
		  "mode"     Modes for which the mapping is defined. In
			     addition to the modes mentioned above, these
			     characters will be used:
			     " "     Normal, Visual and Operator-pending
			     "!"     Insert and Commandline mode
				     (mapmode-ic)
		  "sid"	     The script local ID, used for <sid> mappings
			     (<SID>).  Negative for special contexts.
		  "scriptversion"  The version of the script, always 1.
		  "lnum"     The line number in "sid", zero if unknown.
		  "nowait"   Do not wait for other, longer mappings.
			     (:map-<nowait>).
		  "abbr"     True if this is an abbreviation.
		  "mode_bits" Nvim's internal binary representation of "mode".
			     mapset() ignores this; only "mode" is used.
			     See maplist() for usage examples. The values
			     are from src/nvim/state_defs.h and may change in
			     the future.


################################################################################################
lua print(vim.inspect(vim.fn.getcompletion("", "keymap"))
lua print(vim.inspect(vim.fn.getcompletion("accents", "keymap"))
lua print(vim.inspect(vim.fn.getcompletion("arab*", "keymap"))

################################################################################################
History Of Changes

https://vim.fandom.com/wiki/List_changes_to_the_current_file
Capturing list of change locations
You may want a record of the recent locations where changes occurred in the current buffer. As an example, the following commands redirect the output of the :changes command to file c.txt, then edit that file. The 'more' option is temporarily switched off to avoid the "-- More --" prompt.

:set nomore
:redir > c.txt
:changes
:redir END
:set more
:e c.txt

#################
https://slama.dev/vim/history-of-changes/
Navigating the history

Imagine the following scenario: you’re editing a file; you make changes, then undo them, then you make some more changes. The history will look like this (numbers signify the various states of the file after you made changes):

      2
     /
0---1---3 (we are here)

Using <u> and <C-r> will move you forward/backward in a linear fashion (meaning that you will only move between states 0, 1 and 3). We need more advanced commands to traverse the entire tree.

One way we could do this is based on the relative time a given change was made. To move relative to the current time, use the earlier and later commands:

:earlier {duration}{unit}
:later   {duration}{unit}

where duration is an integer and unit is s/h/m/d for second/hour/minute/day.

You can also use the commands to move based on chronological order of the changes made:

:earlier {num}
:later   {num}

will move the file to num changes before, based on when they were made. This solves our problem from the previous section, since you can use earlier (possibly repeatedly) to switch back to the branch that you decided was actually the one you wanted to keep.

Last way to use the commands is to move based on writes to file:

:earlier {num}f
:later   {num}f

will change the state of the file to num writes to file before.

:echo changenr() сколько изменений достуно для отката

lua print(vim.inspect(vim.opt.undodir))
lua print(vim.fn.undofile("1"))
lua print(vim.inspect(vim.fn.undotree(5))) -- ls
lua print(vim.inspect(vim.fn.undotree(vim.api.nvim_get_current_buf())))
lua print(vim.fn.undotree(vim.api.nvim_get_current_buf()).seq_last) сколько изменений достуно для отката

" remember and restore cursor and window position.
            let savedview = winsaveview()

            let new = getbufline(a:targetBufnr,'^','$')
            silent undo
            let old = getbufline(a:targetBufnr,'^','$')
            silent redo

            call winrestview(savedview)

https://neovim.io/doc/user/builtin.html#getbufline()
lua print(vim.inspect(vim.fn.getbufline(vim.api.nvim_get_current_buf(), 1, "$")))



vim.cmd.redo()
vim.cmd.undo()

vim.cmd.earlier()
vim.cmd.earlier(3)
vim.cmd.later(2)

lua vim.cmd.diffs("/tmp/nvim.stepan/w2Zs1C/2")

lua vim.cmd.difft() включить режим diff
lua vim.cmd.diffo() отключить режим diff

lua print(vim.inspect(vim.opt.diffopt)) настроики diff https://neovim.io/doc/user/options.html#'diffopt'
vim.opt.diffopt:append("vertical") добавить дополнительную настройку



https://neovim.io/doc/user/builtin.html#writefile()
vim.fn.writefile(["foo"], "event.log", "a")
lua local data_b = vim.fn.readfile("foo", "b")

tempfile1 = vim.fn.tempname()


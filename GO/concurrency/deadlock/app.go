package main

//https://medium.com/german-gorelkin/deadlocks-livelocks-starvation-ccd22d06f3ae

// Условия Коффмана
// 1    Условие взаимного исключения. Каждый ресурс в данный момент или отдан ровно одному процессу, или доступен.
// 2    Условие удержания и ожидания. Процессы, в данный момент удерживаю­щие полученные ранее ресурсы, могут запрашивать новые ресурсы.
// 3    Условие отсутствия принудительной выгрузки ресурса. У процесса нельзя принудительным образом забрать ранее полученные ресурсы. Процесс, владеющий ими, должен сам освободить ресурсы.
// 4    Условие циклического ожидания. Должна существовать круговая последовательность из двух и более процессов, каждый из которых ждет доступа к ресурсу, удерживаемому следующим членом последовательности.

// Указанные условия являются необходимыми. То есть, если хоть одно из них не выполняется, 
// то взаимных блокировок никогда не возникнет. Достаточность не имеет места быть: 
// если выполняются все четыре условия, блокировка может и не произойти, 
// например, если в системе нет процессов, претендующих на одновременное использование одних 
// и тех же ресурсов.


// Диаграммы Холта (Holt).
// Отслеживать возникновение взаимных блокировок удобно на диаграммах Холта (Holt). 
// Диаграмма Холта представляет собой направленный граф, имеющий два типа узлов: 
// процессы (показываются кружочками) и ресурсы (показываются квадратиками). 
// Тот факт, что ресурс получен процессом и в данный момент занят этим процессом, 
// указывается ребром (стрелкой) от ресурса к процессу. Ребро, направленное от процесса, 
// к ресурсу, означает, что процесс в данный момент блокирован и находится в состоянии 
// ожидания доступа к соответствующему ресурсу.

import (
	"fmt"
	"sync"
	"time"
)

func main() {
	var wg sync.WaitGroup
	printSum := func(v1, v2 *value) {
		defer wg.Done()

		v1.mu.Lock()
		defer v1.mu.Unlock()

		time.Sleep(2 * time.Second)

		v2.mu.Lock()
		defer v2.mu.Unlock()

		fmt.Printf("sum=%v\n", v1.value+v2.value)
	}
	var a, b value
	wg.Add(2)
	go printSum(&a, &b)
	go printSum(&b, &a)
	wg.Wait()
}

type value struct {
	mu    sync.Mutex
	value int
}
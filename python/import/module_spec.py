# -*- coding: utf-8 -*-

# https://digitology.tech/docs/python_3/reference/import.html#id15

"""

5.4.3. Спецификация модуля¶
Механизм импорта использует различную информацию о каждом модуле во время импорта, особенно перед загрузкой. 
Большая часть информации является общей для всех модулей. Цель спецификации модуля — инкапсулировать эту информацию, 
связанную с импортом каждого модуля.

Использование спецификации во время импорта позволяет передавать состояние между компонентами системы импорта, 
например между поисковиком, который создаёт спецификацию модуля, и загрузчиком, который её выполняет. 
Что наиболее важно, это позволяет машинерии импорта выполнять стандартные операции загрузки, тогда как без спецификации модуля 
эту ответственность несёт загрузчик.

Спецификация модуля представлена ​​как атрибут __spec__ в объекте модуля. См. ModuleSpec для получения подробной информации 
о содержании спецификации модуля.

Добавлено в версии 3.4.


5.4.4. Атрибуты модуля, связанные с импортом

Механизм импорта заполняет эти атрибуты для каждого объекта модуля во время загрузки в соответствии со спецификацией модуля, 
прежде чем загрузчик выполнит модуль.

__name__
    Атрибут __name__ должен быть установлен на полное имя модуля. Это имя используется для уникальной идентификации модуля в системе импорта.

__loader__
    Атрибут __loader__ должен быть установлен для объекта загрузчика, который механизм импорта использовал при загрузке модуля. 
    Это в основном для самоанализа, но может использоваться для дополнительных функций, связанных с загрузчиком, 
    например для получения данных связанных с загрузчиком.

__package__
    Должен быть установлен атрибут модуля __package__. Его значение должно быть строкой, но может быть таким же, как его __name__. 
    Когда модуль является пакетом, его значение __package__ должно быть установлено равным __name__. 
    Если модуль не является пакетом, в __package__ должна быть установлена ​​пустая строка для модулей верхнего уровня 
    или для подмодулей — имя родительского пакета. См. PEP 366 для получения дополнительной информации.

    Атрибут используется вместо __name__ для вычисления явного относительного импорта для основных модулей, 
    как определено в PEP 366. Ожидается, что он будет иметь то же значение, что и __spec__.parent.

    Изменено в версии 3.6: Ожидается, что значение __package__ будет таким же, как __spec__.parent.

__spec__
    Атрибут __spec__ должен быть установлен в соответствии со спецификацией модуля, которая использовалась при импорте модуля. 
    Установка __spec__ в равной степени применима и к модулям инициализации при запуске интерпретатора. 
    Единственное исключение — __main__, где __spec__ - в некоторых случаях установит значение None.

    Если __package__ не определён, __spec__.parent используется в качестве запасного варианта.

    Добавлено в версии 3.4.

    Изменено в версии 3.6: __spec__.parent используется как запасной вариант, когда __package__ не определён.

__path__
    Если модуль является пакетом (обычным или пространства имён), необходимо установить атрибут __path__ объекта модуля. 
    Значение должно быть итерируемым, но может быть пустым, если __path__ больше не имеет значения. 
    Если __path__ не пуст, он должен создавать строки при итерировании. Более подробная информация о семантике __path__ приведена ниже.

    Модули, не входящие в пакет, не должны содержать атрибут __path__.

__file__


__cached__
    __file__ не является обязательным. Если установлено, значение этого атрибута должно быть строкой. 
    Система импорта может оставить __file__ не установленным, если он не имеет семантического значения (например, модуль, загруженный из базы данных).

    Если установлен __file__, также может быть целесообразно установить атрибут __cached__, который является путём к любой скомпилированной версии кода 
    (например, к байтовому скомпилированному файлу). Для установки этого атрибута необязательно, чтобы файл существовал; 
    путь может просто указывать на место, где должен существовать скомпилированный файл (см. PEP 3147).

    Также целесообразно установить __cached__, когда __file__ не установлен. Однако этот сценарий довольно нетипичен. 
    В конечном счете, загрузчик — это то, что использует __file__ и/или __cached__. 
    Поэтому, если загрузчик может загружаться из кэшированного модуля, но в остальном не загружается из файла, 
    этот нетипичный сценарий может быть подходящим.


5.4.5. module.__path__
По определению, если модуль имеет атрибут __path__ — это пакет.
Атрибут пакета __path__ используется во время импорта его подпакетов. Внутри механизма импорта он работает так же, как sys.path, 
то есть предоставляет список местоположений для поиска модулей во время импорта. Однако __path__ обычно гораздо более ограничен, чем sys.path.

__path__ должен быть итератором строк, но может быть пустым. Те же правила, которые используются для sys.path, 
также применимы к __path__ пакета, а sys.path_hooks (рассмотренный далее) учитывается при обходе __path__ пакета.

Пакетный __init__.py файл может установить или изменить пакет __path__ и это обычно был способ реализации пакетов пространства имён до PEP 420.
 С принятием PEP 420 пакеты пространства имён больше не должны предоставлять код манипуляции __init__.py файлы, 
 содержащие только __path__; механизм импорта автоматически правильно устанавливает __path__ для пакета пространства имён.
"""
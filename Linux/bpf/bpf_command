https://github.com/brendangregg/bpf-perf-tools-book
https://github.com/iovisor/bcc/blob/master/INSTALL.md?ysclid=m10g8nbtxf788226289#ubuntu---binary

cd /usr/sbin

https://commandmasters.com/commands/opensnoop-osx/

Tracking all file opens by a process name
sudo ./opensnoop-bpfcc -n "nvim"

Tracking all file opens by a process PID
sudo opensnoop-bpfcc -p PID

https://telegra.ph/BCC--instrumenty-trassirovki-dlya-Linux-IO-setej-i-mnogogo-drugogo-05-20?ysclid=lzwqha4r8j96319159
Отслеживание новых процессов в Linux
sudo execsnoop-bpfcc

при вызове sound
/usr/share/cinnamon/cinnamon-settings/cinnamon-settings.py sound

Мониторинг TCP-соединений в Linux
sudo tcpconnect-bpfcc


Еще больше информации можно получить, использовав дополнительные параметры.
Например, можно вывести информацию только о сокетах TCP ( -t) с внутренней
информацией TCP (-i), расширенной информацией о сокете (-e), информацией
о процессе (-p) и информацией о потреблении памяти (-m):
# ss -tiepm

perf examples
https://github.com/brendangregg/perf-tools/tree/master/examples

проверить установленные пакеты
dpkg --get-selections | grep -iE 'linux.+image'

/usr/lib/python3/dist-packages/bcc

####################################################
/usr/sbin утилиты находятся тут

man pythoncalls-bpfcc
pythoncalls-bpfcc -l python  28151 1
examples:
    ./ucalls -l java 185        # trace Java calls and print statistics on ^C
    ./ucalls -l python 2020 1   # trace Python calls and print every second
    ./ucalls -l java 185 -S     # trace Java calls and syscalls
    ./ucalls 6712 -S            # trace only syscall counts
    ./ucalls -l ruby 1344 -T 10 # trace top 10 Ruby method calls
    ./ucalls -l ruby 1344 -L    # trace Ruby calls including latency
    ./ucalls -l php 443 -LS     # trace PHP calls and syscalls with latency
    ./ucalls -l python 2020 -mL # trace Python calls including latency in ms

####################################################
pythonflow-bpfcc -h
usage: uflow [-h] [-l {java,perl,php,python,ruby,tcl}] [-M METHOD] [-C CLAZZ] [-v] pid

Trace method execution flow in high-level languages.

positional arguments:
  pid                   process id to attach to

options:
  -h, --help            show this help message and exit
  -l {java,perl,php,python,ruby,tcl}, --language {java,perl,php,python,ruby,tcl}
                        language to trace
  -M METHOD, --method METHOD
                        trace only calls to methods starting with this prefix
  -C CLAZZ, --class CLAZZ
                        trace only calls to classes starting with this prefix
  -v, --verbose         verbose mode: print the BPF program (for debugging purposes)

examples:
    ./uflow -l java 185                # trace Java method calls in process 185
    ./uflow -l ruby 134                # trace Ruby method calls in process 134
    ./uflow -M indexOf -l java 185     # trace only 'indexOf'-prefixed methods
    ./uflow -C '<stdin>' -l python 180 # trace only REPL-defined methods

sudo pythonflow-bpfcc -l python  28156
sudo pythonflow-bpfcc -M do_POST -l python  28156

###################################################
man pythonstat-bpfcc

                                                                                                                                  
usage: ustat [-h] [-l {java,node,perl,php,python,ruby,tcl}] [-C] [-S {cload,excp,gc,method,objnew,thread}] [-r MAXROWS] [-d] [interval] [count]

Activity stats from high-level languages.

positional arguments:
  interval              output interval, in seconds
  count                 number of outputs

options:
  -h, --help            show this help message and exit
  -l {java,node,perl,php,python,ruby,tcl}, --language {java,node,perl,php,python,ruby,tcl}
                        language to trace (default: all languages)
  -C, --noclear         don't clear the screen
  -S {cload,excp,gc,method,objnew,thread}, --sort {cload,excp,gc,method,objnew,thread}
                        sort by this field (descending order)
  -r MAXROWS, --maxrows MAXROWS
                        maximum rows to print, default 20
  -d, --debug           Print the resulting BPF program (for debugging purposes)

examples:
  ./ustat              # stats for all languages, 1 second refresh
  ./ustat -C           # don't clear the screen
  ./ustat -l java      # Java processes only
  ./ustat 5            # 5 second summaries
  ./ustat 5 10         # 5 second summaries, 10 times only


bpftrace
https://github.com/bpftrace/bpftrace/blob/master/INSTALL.md



https://github.com/brendangregg/bpf-perf-tools-book
https://github.com/iovisor/bcc/blob/master/INSTALL.md?ysclid=m10g8nbtxf788226289#ubuntu---binary
https://docs.ebpf.io/linux/helper-function/bpf_trace_printk/

cd /usr/sbin

https://commandmasters.com/commands/opensnoop-osx/

Tracking all file opens by a process name
sudo ./opensnoop-bpfcc -n "nvim"

Tracking all file opens by a process PID
sudo opensnoop-bpfcc -p PID

https://telegra.ph/BCC--instrumenty-trassirovki-dlya-Linux-IO-setej-i-mnogogo-drugogo-05-20?ysclid=lzwqha4r8j96319159
Отслеживание новых процессов в Linux
sudo execsnoop-bpfcc

при вызове sound
/usr/share/cinnamon/cinnamon-settings/cinnamon-settings.py sound

Мониторинг TCP-соединений в Linux
sudo tcpconnect-bpfcc


Еще больше информации можно получить, использовав дополнительные параметры.
Например, можно вывести информацию только о сокетах TCP ( -t) с внутренней
информацией TCP (-i), расширенной информацией о сокете (-e), информацией
о процессе (-p) и информацией о потреблении памяти (-m):
# ss -tiepm

perf examples
https://github.com/brendangregg/perf-tools/tree/master/examples

проверить установленные пакеты
dpkg --get-selections | grep -iE 'linux.+image'

/usr/lib/python3/dist-packages/bcc

####################################################
/usr/sbin утилиты находятся тут

man pythoncalls-bpfcc
pythoncalls-bpfcc -l python  28151 1
examples:
    ./ucalls -l java 185        # trace Java calls and print statistics on ^C
    ./ucalls -l python 2020 1   # trace Python calls and print every second
    ./ucalls -l java 185 -S     # trace Java calls and syscalls
    ./ucalls 6712 -S            # trace only syscall counts
    ./ucalls -l ruby 1344 -T 10 # trace top 10 Ruby method calls
    ./ucalls -l ruby 1344 -L    # trace Ruby calls including latency
    ./ucalls -l php 443 -LS     # trace PHP calls and syscalls with latency
    ./ucalls -l python 2020 -mL # trace Python calls including latency in ms

####################################################
pythonflow-bpfcc -h
usage: uflow [-h] [-l {java,perl,php,python,ruby,tcl}] [-M METHOD] [-C CLAZZ] [-v] pid

Trace method execution flow in high-level languages.

positional arguments:
  pid                   process id to attach to

options:
  -h, --help            show this help message and exit
  -l {java,perl,php,python,ruby,tcl}, --language {java,perl,php,python,ruby,tcl}
                        language to trace
  -M METHOD, --method METHOD
                        trace only calls to methods starting with this prefix
  -C CLAZZ, --class CLAZZ
                        trace only calls to classes starting with this prefix
  -v, --verbose         verbose mode: print the BPF program (for debugging purposes)

examples:
    ./uflow -l java 185                # trace Java method calls in process 185
    ./uflow -l ruby 134                # trace Ruby method calls in process 134
    ./uflow -M indexOf -l java 185     # trace only 'indexOf'-prefixed methods
    ./uflow -C '<stdin>' -l python 180 # trace only REPL-defined methods

sudo pythonflow-bpfcc -l python  28156
sudo pythonflow-bpfcc -M do_POST -l python  28156

###################################################
man pythonstat-bpfcc

                                                                                                                                  
usage: ustat [-h] [-l {java,node,perl,php,python,ruby,tcl}] [-C] [-S {cload,excp,gc,method,objnew,thread}] [-r MAXROWS] [-d] [interval] [count]

Activity stats from high-level languages.

positional arguments:
  interval              output interval, in seconds
  count                 number of outputs

options:
  -h, --help            show this help message and exit
  -l {java,node,perl,php,python,ruby,tcl}, --language {java,node,perl,php,python,ruby,tcl}
                        language to trace (default: all languages)
  -C, --noclear         don't clear the screen
  -S {cload,excp,gc,method,objnew,thread}, --sort {cload,excp,gc,method,objnew,thread}
                        sort by this field (descending order)
  -r MAXROWS, --maxrows MAXROWS
                        maximum rows to print, default 20
  -d, --debug           Print the resulting BPF program (for debugging purposes)

examples:
  ./ustat              # stats for all languages, 1 second refresh
  ./ustat -C           # don't clear the screen
  ./ustat -l java      # Java processes only
  ./ustat 5            # 5 second summaries
  ./ustat 5 10         # 5 second summaries, 10 times only


bpftrace
https://github.com/bpftrace/bpftrace/blob/master/INSTALL.md



bpftrace -e 'tracepoint:syscalls:sys_enter_open { printf("%s %s\n", comm, str(args->filename)); }'
bpftrace -l 'tracepoint:syscalls:sys_enter_open*'
bpftrace -e 'tracepoint:syscalls:sys_enter_open* { @[probe] = count(); }'

sudo strace -ebpf ./execsnoop-bpfcc

gcc -H -fsyntax-only dyn_arr.c
find . -type f -name "pthread.h" 
find . -type f -name "libc.*"

./var/lib/flatpak/runtime/org.freedesktop.Sdk/x86_64/23.08/5292733d730c222c50e4e31a1496d30615f7d0787e4cc9518862d0dc46780d27/files/lib/gcc/x86_64-unknown-linux-gnu/13.2.0/include-fixed/pthread.h
./var/lib/flatpak/runtime/org.freedesktop.Sdk/x86_64/23.08/5292733d730c222c50e4e31a1496d30615f7d0787e4cc9518862d0dc46780d27/files/include/pthread.h
./var/lib/docker/overlay2/804e7ec72ef7208db3bf49def7f96b478e60d58154f7d0f906589c69a16bfeb6/merged/usr/include/pthread.h
./var/lib/docker/overlay2/0c9c1b2035f7726126ce4920132a7b0b83ef8a227a296317f7d1bf9ca9db26c1/diff/usr/include/pthread.h
./var/lib/docker/overlay2/7469c97cb25f571762ca7269a5aad9be2aca5aea73ad3f4c34d737b1c24b9af0/diff/usr/include/pthread.h
./usr/include/newlib/pthread.h
./usr/include/pthread.h


sudo ./funccount-bpfcc -i 1 "vfs_*" --pid 16194
sudo ./funccount-bpfcc  "t:syscalls:sys_enter*" --pid 16194
sudo ./funccount-bpfcc  "c:malloc*" --pid 18450
sudo ./trace-bpfcc -U 'c:open "%s %d", arg1, arg2' | sudo tee log
sudo ./trace-bpfcc -U -n 'flake' 'c:open "%s %d", arg1, arg2' | sudo tee log

отобразит скоько байт было записано "res %d"
sudo ./trace-bpfcc -tKU -p $(ps -C usehotel3 -o pid=) 'r:c:write "res %d", retval' | sudo tee log

выводит, что пользователь вводит в интерактивном режиме 'c:read "res %s %s", arg1, arg2'
sudo ./trace-bpfcc -tKU -p $(ps -C usehotel3 -o pid=) 'c:read "res %s %s", arg1, arg2' | sudo tee log


t:sched:sched_switch срабоатывает при передаче управвления - интерактивный режим
sudo ./trace-bpfcc -tKU -p $(ps -C usehotel3 -o pid=) t:sched:sched_switch | sudo tee log

sudo ./stackcount-bpfcc -p 23113 c:malloc

sudo ./stackcount-bpfcc -p $(ps -C dyn_arr_c -o pid=) c:malloc
sudo ./stackcount-bpfcc -p $(ps -C dyn_arr_c -o pid=) t:sched:sched_switch

cd /sys/kernel/tracing
cat trace_pipe отображет в реальном времени трассировочную информацию
в файл biolatency-bpfcc (cd /usr/sbin)
добавлена строчка bpf_trace_printk("BDG req=%llx ts=%lld\\n", req, ts); стр 175


####

trace-bpfcc -e 'tracepoint:syscalls:sys_enter_open { printf("%s %s\n", comm, str(args->filename)); }'
trace-bpfcc 'p::SyS_nanosleep(struct timespec *ts) "sleep for %lld ns", ts->tv_nsec'

trace-bpfcc '::do_sys_open "%s", sys_enter_openat'     sys_enter_openat
trace-bpfcc sys_enter_openat
trace-bpfcc 'do_sys_open "%s", arg2'
trace-bpfcc -K 'r::do_sys_open'


trace-bpfcc 't:syscalls:do_sys_open'



development
Обязательно к прочтению:

Руководство от Бегунова Алексея

Курс молодого разработчика git hook (Оригинал)
Больше года назад было обсуждение как можно упростить разработку и поддержку git hook'ов.

В процессе реализации хуков проверки js и проверки tmpl был выделен общий код, который берет на себя основную работу с git и окружением.

В этой новости постараемся рассказать обо всём, о чем нужно знать сегодня при написании своего hook'а. Позже будет оформлена статья на wi.sbis.ru.

Все hook'и хранятся в репозитории https://git.sbis.ru/sbis-ci/monitoring/gitlab/git-hooks.

В папке "git-hooks/hookfiles/rules" хранятся "проверки" - суть python3 файлы, которые должны экспортировать метод run(commitInfo, logger), где commitInfo - это объект класса CommitInfo (описано в конце), logger - объект стандартного класса Logger.

Запускаются проверки последовательно в скрипте hookfiles/module_check_main.py. Отдельно регистрировать проверки не нужно, т.к. запускаются все *.py файлы из папки rules.

Логирование будет происходить в файл на сервере gitlab , при этом имя файла лога будет соответствовать имени репозитория.

Основное требование к проверкам - не должно быть явного вывода в stdout:

пользоваться print() нельзя, т.к. если git push выполняется в windows, то переменная sys.stdout.encoding будет равна строке 'ANSI_X3.4-1968'. Как результат - скрипт будет падать на первом не правильном символе (кирилическом, например). Для справки: если git push выполняется из centos, то sys.stdout.encoding будет равна строке 'utf8'.
при запуске hook'а из gitlab первая строчка (до переноса строки) выведется как ошибка. Остальной вывод будет впустую. Приватных проверок нет. Если какую-то проверку нужно применять только к одному репозиторию, то валидируем commitInfo.repositoryName и выходим.
Проверка должна решать 1 задачу, но хорошо. Classic.

Тестировать свои git hook'и можно и нужно на выделеном гитлабе http://dev-git.sbis.ru

Описание класса CommitInfo
Инкапсулирует работу с git.

Поля:
commit_info.revision_before - ревизия до. Пример: 95b4a82e2d7453d54c3386541591a42c383a97a8
commit_info.revision_after - ревизия после. Пример: 95b4a82e2d7453d54c3386541591a42c383a97a8
commit_info.branch_name - полное имя ветки. Пример: refs/heads/3.18.110/bugfix/TEST
repositoryName - короткое имя репозитория (group/project). Пример: "sbis-ci/test-hook" для репозитория "git@fix-git.sbis.ru:sbis-ci/test-hook.git"
commitAuthor - автор коммита
changedFiles - список изменённых файлов (пути относительные корня репозитрия)
runFromGitlab - hook запущен из GitLab. Для него нужен особый вывод ошибок.
Методы:
writeError(self, ruleName, message, filePath='') - вывести ошибку пользователю. Все ошибки будут выведены в конце работы hook'а. ruleName - имя проверки, message - текст ошибки, filePath - путь до файла, в котором ошибка(опционально).
checkBranchVersion(self, version) - проверяем имя ветки по tensor flow. Нужно для внедрения проверки с конкретной версии, чтобы не мешать выпуску более старых вех (например, хотфиксов).
getFileContent(self, filePath) - получить содержимое файла как массив байт. После этого обычно нужно декодировать массив в utf8 (в try/except, конечно). Получить можно только файлы, что есть в поле CommitInfo.changedFiles.
Конец руководства

Прикладная часть
Этапы создания хука:

создание скрипта(ов) хука
(при необходимости) внесение изменений в окружение сервера GitLab (установка доп. модулей, программ, создание общих ресурсов и тд.)
тестирование работы хука на разных версиях GitLab
написание документации
передача хука в сборку
Создание скрипта(ов) хука
Введение
В "Компании "Тензор" используются pre-recieve git hook: запускаются на сервере после выполнения "git push", непосредственно перед внесением изменения в хранилище. По коду выхода хука GitLab либо применяет изменение, либо отклоняет коммит.

Для упрощения разработки хуков был написан небольшой фреймворк, который берет на себя выполнение типовых операций по работе с коммитом. Состав фреймворка:

module_check_main.py - скрипт инициализирует среду выполнения хуков и занимается их непосредственным запуском и обработкой полученной информации
commitinfo.py - содержит класс CommitInfo, который получает всю необходимую информацию о коммите и позволяет выполнить типовые манипуляции с коммитом (например получить содержимое файлов)
hook_helpers.py - дополнительные функции, которые могут быть полезны при разработке собственного гит хука.
Правила
хук может быть написан на любом языке, но для запуска необходим стартовый python скрипт (.py), который помещается в папку git-hooks/hookfiles/rules и содержит функцию def run(commit_info, logger): которую будет вызывать фреймворк
хук не должен содержать команду выхода: при ненулевом коде коммит будет отклонен, а при нулевом - не запустятся остальные хуки
чтобы хук не проверял код дважды, во время коммита ветки/изменений и потом повторно в мерж-реквестах: добавте в начале:
if commit_info.is_accept_merge_request: return

Внесение изменений в окружение сервера GitLab
Если для работы хука необходимы дополнительные модули python, установка программ и любая другая модификация окружения - просто напишите перечень необходимого ПО в отдел сборка/мониторинг.

Тестирование работы хука
Для того, чтобы проверить работу хука и его окружения , создана сборка gitlab_dev. Она позволяет развернуть на dev-git.sbis.ru хуки из вашей ветки. Либо можно напрямую править файлы:

на сервере dev-git.sbis.ru доступны следующие расшаренные ресурсы (smb + nfs):

\\dev-git.sbis.ru\hooks_* - каталоги содержащие хуки тестовых репозиториев
\\dev-git.sbis.ru\logs - каталог содержащий логи хуков
\\dev-git.sbis.ru\tmp - каталог для временных файлов, используемый некоторыми хуками
Используя эту сборку и указанные расшаренные папки вы можете подготовить и выложить окружение и сами хуки, пробовать коммитить/мержить файлы/ветки в тестовый репозиторий, отслеживать поведение хука.

Документация
На wiki к каждому хуку обязательно должна быть написана краткая документация, отвечающая на вопросы:

Заказчик хука
Автор хука
Назначение хука
Состав (если несколько скриптов, конфигов, папок)
Алгоритм работы
Примеры срабатываний (скриншоты)
Как проверить работу
Все ссылки на документацию для каждого хука должны быть на этой странице.

Пример оформления документации для хука: check_py_and_orx_syntax.

Передача хука в сборку
Для внедрения хука в боевой гитлаб необходимо написать поручение в отдел мониторинга со следующим обязательным содержимым:

по хукам: ссылка на мерж-реквест из вашей ветки в master
ссылка на созданную документацию по хуку на текущей wiki репозитория
ссылка на новость на сектор разработки о новом хуке (если хук общий для всех репозиториев)
контрольные 2 файла: good-должен пройти хук, bad - должен быть отброшен.
После получения поручения, проводится проверка кода, при необходимости - ревью с привлечением сторонних программистов, проверка работоспособности хука, правильность заполнения документации. После завершения этих этапов публикуется новость и хук устанавливается на требуемые репозитории.